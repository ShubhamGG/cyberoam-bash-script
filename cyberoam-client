#!/bin/bash

ACK_INTERVAL=180 #in seconds
LOGIN_COUNT_MAX=5
LOGIN_ATTEMPT_INTERVAL=5 #in seconds

name=$0
name=${name##*/}

function print_usage {
	echo "Usage:"
	echo "$name [-v] [-q] [-s] <username>"
	echo "$name [-v] -l"
	echo "$name [-v] -i"
	echo "$name [-v] -d <username>"
	echo "-d : delete configuration file (if found) for username."
	echo "-s : save configuration file (overwrite if already exists) for username."
	echo "     If -s is not specified, then saved config file for username is used (no input asked). If the config file doesn't exist, the login info needs to be inputted and is not stored."
	echo "-q : Be quiet i.e. don't send notifications of events."
	echo "-l : logout. Other way to logout is to send ctrl-c i.e. SIGINT to the running process of $name."
	echo "-i : show info. This option asks the running cyberoam process to show a notification of its current situation and also revalidate login status."
	echo "This option causes the other process to send a notification irrespective of the -q parameter, if it was given any."
	echo "-v : give verbose output."
}

#parsing options
option=0
optcount=0
quiet=0
verbose=0
[ $# -eq 0 ] || [[ $1 == "--help" ]] && print_usage && exit 0
while getopts ":d::s::qlvi" opt; do
	case $opt in
		d)	optcount=$[ $optcount + 1 ]
			[[ $optcount > 1 ]] && echo "Illegal number of options" >&2 && print_usage >&2 && exit -2
			user=$OPTARG
			option=1
		;;
		s)	optcount=$[ $optcount + 1 ]
			[[ $optcount > 1 ]] && echo "Illegal number of options" >&2 && print_usage >&2 && exit -2
			user=$OPTARG
			option=2
		;;
		q)	quiet=1
		;;
		v)	verbose=1
		;;
		l)	[[ $quiet = 1 || $option > 0 ]] && echo "Illegal number of options" >&2 && print_usage >&2 && exit -2
			option=3
		;;
		i)	[[ $quiet = 1 || $option > 0 ]] && echo "Illegal number of options" >&2 && print_usage >&2 && exit -2
			option=4
		;;
		\?)
			echo "Invalid option: -$OPTARG" >&2 && print_usage >&2
			exit -2
		;;
		:)
			echo "Option -$OPTARG requires an argument." >&2 && print_usage >&2
			exit -2
	esac
done
optcount=0
[ $verbose -eq 1 ] && optcount=$[ $optcount + 1 ]
[[ $option = 3 || $option = 4 ]] && [ $[ $# - $optcount ] -gt 1 ] && echo "Invalid number of arguments">&2 && print_usage>&2 && exit -2
[ $quiet -eq 1 ] && optcount=$[ $optcount + 1 ]
[ $[ $# - $optcount ] -gt 2 ] && echo "Invalid number of arguments">&2 && print_usage>&2 && exit -2

# Setting user variable when options s,d,i,l are not given
if [ $option -eq 0 ]; then
	[ $optcount -eq 0 ] && user=$1
	[ $optcount -eq 1 ] && user=$2
	[ $optcount -eq 2 ] && user=$3
fi

# processing option -d i.e. deleting conffile
conffolder=~/.config/cyberoam
if [ ! -d $conffolder ]; then
	[ ! -d ~/.config ] && mkdir ~/.config
	mkdir ~/.config/cyberoam
	conffolder=~/.config/cyberoam
fi
conffile=$conffolder/$user.conf
if [ $option == 1 ]; then
	if [ -e $conffile ]; then
		rm $conffile && [ $verbose -eq 1 ] && echo "`date +%H:%M:%S` : Configuration file deleted succesfully"
	else
		echo "Specified Configuration file not found."
	fi
	exit 0
fi

# Checking if another process is running
other=`ps -lC $name | grep -v PID | grep -v $$`
[ -n "$other" ] && other=`echo $other | awk '{print $4}'`
if [ $option -eq 3 ]; then # Logging out by sending SIGINT to other process
	if [ -z "$other" ]; then
		echo "No running process of $name found."
	else
		kill -INT $other
		pkill -P $other sleep
		[ $verbose -eq 1 ] && echo "`date +%H:%M:%S` : kill command sent."
	fi
	exit 0
elif [ $option -eq 4 ]; then # Send SIGUSR1 to other process
	if [ -z "$other" ]; then
		echo "No running process of $name found."
	else
		kill -USR1 $other
		pkill -P $other sleep
		[ $verbose -eq 1 ] && echo "`date +%H:%M:%S` : reevaluation signal sent."
	fi
	exit 0
elif [ -n "$other" ]; then #preventing duplicate processes from running
	echo "$name already running with pid $other."
	exit 0
fi

# function to accept login info from user
function gather_details {
	echo -n "Cyberoam server ip address: "
	read url
	echo -n "Password for $user: "
	read -s password
	echo ""
}

# processing option -s and its absence i.e. saving, loading, overwriting config file or just taking input
if [ $option -eq 2 ]; then
	[ -e $conffile ] && echo "">$conffile
	gather_details
	echo "url='$url'">>$conffile
	echo "password=$password">>$conffile
elif [ -e $conffile ]; then
	. $conffile
else
	gather_details
fi

# Implement non-verbose cutoff from terminal i.e. takes itself to background
if [ $verbose -eq 0 ]; then
	comman="$name -v"
	[ $quiet -eq 1 ] && comman="$comman -q"
	pipe=$conffolder/daemonizer
	[ ! -p $pipe ] && mkfifo $pipe
	( setsid $comman $user > /dev/null 2>&1 < $pipe )&
	echo $url > $pipe && echo $password > $pipe
	exit 0
fi

function login {
	login_success=0
	trap - SIGINT
	echo "`date +%H:%M:%S` : Attempting login"
	local response=`curl -s -k -d mode=191 -d username=$user -d password=$password https://$url:8090/login.xml`
	if [[ $response =~ "successfully logged in" ]]; then
		echo "`date +%H:%M:%S` : Logged in successfully"
		[ $quiet -eq 0 ] && notify-send -i info "Logged in successfully" "user: $user"
		login_success=1
	elif [[ $response =~ "Maximum Login Limit" ]]; then
		echo "`date +%H:%M:%S` : Maximum Login Limit Reached"
		[ $quiet -eq 0 ] && notify-send -i error "Maximum Login Limit Reached" "user: $user"
		exit -1
	else
		echo "`date +%H:%M:%S` : Login failed"
	fi
}

function ack {
	echo "`date +%H:%M:%S` : Sending keep-alive request"
	local response=`curl -s -k -G -d mode=192 -d username=$user https://$url:8090/live`
	ack_success=1
	response=`curl -s -I http://www.google.com/robots.txt`
	[[ $response =~ "Please login" ]] && ack_success=0
}

function logoutt {
	echo "`date +%H:%M:%S` : Attempting logout"
	local response=`curl -s -k -d mode=193 -d username=$user https://$url:8090/logout.xml`
	if [[ $response =~ "You have successfully logged off" ]]; then
		echo "`date +%H:%M:%S` : Logged out successfully"
		[ $quiet -eq 0 ] && notify-send -i info "Logged out successfully" "user: $user"
	else
		echo "`date +%H:%M:%S` : Logout failed"
		[ $quiet -eq 0 ] && notify-send -i error "Logout Failed" "user: $user"
	fi
	trap - SIGINT
	kill -INT $$
	exit 0
}

# recheck login status
function recheck {
	echo "`date +%H:%M:%S` : Starting recheck process"
	if [[ $login_success = 1 ]]; then
		notify-send -i info -t 2000 "Logged in as $user" "Rechecking login status"
		ack
		[[ $ack_success = 1 ]] && attempt=1 || attempt=0
	else
		notify-send -i info -t 2000 "Cyberoam not logged in."
	fi
}

trap recheck SIGUSR1

login_count=$LOGIN_COUNT_MAX
attempt=0
while [ 1 ]
do
	case $attempt in
		0)	# login attempt
			login
			if [[ $login_success == 1 ]]; then
				trap logoutt SIGINT
				login_count=$LOGIN_COUNT_MAX
				attempt=1
				ack
			elif [[ $login_count > -1 ]]; then
				login_count=$[ $login_count - 1 ]
				if [ $login_count -eq 0 ]; then
					echo "`date +%H:%M:%S` : Abandoning Attempt. Exiting..."
					[ $quiet -eq 0 ] && notify-send -i error "Login Failed" "user: $user"
					exit 0
				fi
			fi
			sleep $LOGIN_ATTEMPT_INTERVAL
		;;
		1)	# keep-alive request
			sleep $ACK_INTERVAL
			ack
			if [[ $ack_success == 0 ]]; then
				echo "`date +%H:%M:%S` : keep-alive request failed. Login required."
				attempt=0
				# [ $quiet -eq 0 ] && notify-send -i error "Cyberoam Session Failed" "Trying again..."
			fi
		;;
	esac
done
